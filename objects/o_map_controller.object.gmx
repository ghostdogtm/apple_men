<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var array_row_index, array_col_index;

max_size_w = 10;
max_size_h = 10;

block_width = 34;
block_height = 30;
half_block_width = block_width / 2;
half_block_height = block_height / 2;

grid_start_x = 34;
grid_start_y = 30;
grid_end_x = grid_start_x + (max_size_w * block_width);
grid_end_y = grid_start_y + (max_size_h * block_height);
grid_start_x_offset = grid_start_x / block_width;
grid_start_y_offset = grid_start_y / block_height;

map_object_sprite_panel_x = 578;
map_object_sprite_panel_y = 30;

for (i = 0; i &lt; max_size_w; i++) {
  for (j = 0; j &lt; max_size_w; j++) {
    map_object_array[i, j] = 0;
  }
}

draw_lines = true;

for (i = 0; i &lt; o_map_object.map_object_count; i++) {
  map_object_sprite_list[i] = object_get_sprite(o_map_object.map_object_list[i]);
  map_object_sprite_xoffset_list[i] = sprite_get_xoffset(map_object_sprite_list[i]);
}

/*
var level_file;
level_file = file_bin_open("test.dat", 2);
file_bin_seek(level_file, 4);

var object_id;

for (i = 0; i &lt; max_size_w; i++) {
  for (j = 0; j &lt; max_size_w; j++) {
    object_id = file_bin_read_byte(level_file);
    if (object_id != 0) {
      instance_create(grid_start_x * (i + 1), grid_start_y * (j + 1), o_map_object.map_object_list[object_id - 1]);
      map_object_array[i, j] = object_id;
    } else {
      map_object_array[i, j] = 0;
    }
  }
}
file_bin_close(level_file);

array_row_index = (grid_start_y / block_height) - grid_start_y_offset;
for (i = 0; i &lt; max_size_w; i++) {
  array_col_index = ((grid_start_x * (i + 1)) / block_width) - grid_start_x_offset;
  map_object_array[array_row_index, array_col_index] = 1;
  instance_create(grid_start_x * (i + 1), grid_start_y, o_wall_a);
  
  map_object_array[max_size_h - 1, array_col_index] = 1;
  instance_create(grid_start_x * (i + 1), grid_end_y - block_height, o_wall_a);
}

array_col_index = (grid_start_x / block_width) - grid_start_x_offset;
for (i = 2; i &lt; max_size_h; i++) {
  array_row_index = (grid_start_y * i / block_height) - grid_start_y_offset;
  map_object_array[array_row_index, array_col_index] = 1;
  instance_create(grid_start_x, grid_start_y * i, o_wall_a);
  
  map_object_array[array_row_index, max_size_w - 1] = 1;
  instance_create(grid_end_x - block_width, grid_start_y * i, o_wall_a);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var prev_color;

draw_set_colour(c_lime);

for (i = 0; i &lt;= max_size_w; i++) {
  draw_line(grid_start_x * (i + 1), grid_start_y, grid_start_x * (i + 1), grid_end_y);
}

for (i = 0; i &lt;= max_size_h; i++) {
  draw_line(grid_start_x, grid_start_y * (i + 1), grid_end_x, grid_start_y * (i + 1));
}

//Рисовалка "прицела"//
if (draw_lines)
{
  //сохраняем предыдущий цвет
  prev_color = draw_get_color();
  //ставим белый для рисования линии
  draw_set_color(c_white);
  //вычисляем координату линии по х и у
  line_x = round((mouse_x) / half_block_width) * half_block_width;
  line_y = round((mouse_y) / half_block_height) * half_block_height;
  //ограничиваем х
  line_x = max(grid_start_x, line_x);
  line_x = min(grid_end_x, line_x);
  //ограничиваем у
  line_y = max(grid_start_y, line_y);
  line_y = min(grid_end_y, line_y);
  //рисуем линию
  draw_line(line_x, grid_start_y, line_x, grid_end_y);
  draw_line(grid_start_x, line_y, grid_end_x, line_y);
  //возвращаем предыдущий цвет
  draw_set_color(prev_color);
}

for (i = 0; i &lt; o_map_object.map_object_count; i++) {
  draw_sprite(map_object_sprite_list[i], 0, map_object_sprite_panel_x + map_object_sprite_xoffset_list[i], map_object_sprite_panel_y * (i + 1));
}

prev_color = draw_get_color();
draw_set_color(c_aqua);
draw_rectangle(map_object_sprite_panel_x, map_object_sprite_panel_y * (o_map_object.map_object_index + 1), map_object_sprite_panel_x + block_width, map_object_sprite_panel_y * (o_map_object.map_object_index + 1) + block_height, true);
draw_set_color(prev_color);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var level_file_name, level_file, time_minutes, time_seconds;

level_file_name = get_save_filename_ext("level|*.dat", "level_", "E:\silver\dev\!games\Apple_Men\am_levels\", "Save a level here");

if (level_file_name != "") {
  time_minutes = get_integer("Enter minutes for level", 0);
  time_seconds = get_integer("Enter seconds for level", 0);

  level_file = file_bin_open(level_file_name, 2);
  file_bin_write_byte(level_file, max_size_w);
  file_bin_write_byte(level_file, max_size_h);
  file_bin_write_byte(level_file, time_minutes);
  file_bin_write_byte(level_file, time_seconds);
  
  for (i = 0; i &lt; max_size_w; i++) {
    for (j = 0; j &lt; max_size_h; j++) {
      file_bin_write_byte(level_file, map_object_array[j, i]);
    }
  }
  
  file_bin_close(level_file);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var level_file, level_file_name, object_id;

level_file_name = get_open_filename_ext("level|*.dat", "level_", "E:\silver\dev\!games\Apple_Men\am_levels\", "Save a level here");

if (level_file_name != "") {
  level_file = file_bin_open(level_file_name, 2);
  
  max_size_w = file_bin_read_byte(level_file);
  max_size_h = file_bin_read_byte(level_file);
  
  grid_end_x = grid_start_x + (max_size_w * block_width);
  grid_end_y = grid_start_y + (max_size_h * block_height);
  
  for (i = 0; i &lt; max_size_w; i++) {
    for (j = 0; j &lt; max_size_h; j++) {
      map_object_array[i, j] = 0;
    }
  }
  
  file_bin_seek(level_file, 4);
  
  for (i = 0; i &lt; max_size_w; i++) {
    for (j = 0; j &lt; max_size_h; j++) {
      object_id = file_bin_read_byte(level_file);
      if (object_id != 0) {
        instance_create(grid_start_x * (i + 1) + map_object_sprite_xoffset_list[object_id - 1], grid_start_y * (j + 1), o_map_object.map_object_list[object_id - 1]);
        map_object_array[i, j] = object_id;
      } else {
        map_object_array[i, j] = 0;
      }
    }
  }
  file_bin_close(level_file);
  
  o_player.o_player_stone_count = instance_number(o_player_stone)
  
  for (i = 0; i &lt; o_player.o_player_stone_count; i += 1;) {
    o_player.player_object_ids[i] = instance_find(o_player_stone, i);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_size_w = get_integer("Enter room width", 0);
max_size_h = get_integer("Enter room height", 0);

grid_end_x = grid_start_x + (max_size_w * block_width);
grid_end_y = grid_start_y + (max_size_h * block_height);

for (i = 0; i &lt; max_size_w; i++) {
  for (j = 0; j &lt; max_size_h; j++) {
    map_object_array[i, j] = 0;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
